version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: luckxpress-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-luckxpress}
      POSTGRES_USER: ${DB_USER:-luckxpress}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-luckxpress}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - luckxpress-network
  
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: luckxpress-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - luckxpress-network
  
  # Kafka Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: luckxpress-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - luckxpress-network
  
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: luckxpress-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - luckxpress-network
  
  # Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_VERSION=${BUILD_VERSION:-1.0.0}
    container_name: luckxpress-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      # Spring Configuration
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-luckxpress}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-luckxpress}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-changeme}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-changeme}
      OAUTH2_CLIENT_ID: ${OAUTH2_CLIENT_ID:-luckxpress}
      OAUTH2_CLIENT_SECRET: ${OAUTH2_CLIENT_SECRET:-changeme}
      
      # Sentry
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: ${ENVIRONMENT:-production}
      
      # Application Settings
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8081
    volumes:
      - app_logs:/app/logs
    ports:
      - "8080:8080"
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - luckxpress-network
  
  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: luckxpress-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - luckxpress-network
  
  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: luckxpress-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - luckxpress-network

networks:
  luckxpress-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  app_logs:
  prometheus_data:
  grafana_data:
