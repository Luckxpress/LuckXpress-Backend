name: CI/CD Pipeline with Sentry Integration

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scan at 2 AM

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx2048m -XX:MaxMetaspaceSize=512m'
  SENTRY_ORG: 'luckxpress'
  SENTRY_PROJECT: 'backend'

jobs:
  # Job 1: Code Quality & Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for SonarQube
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Run SpotBugs Security Analysis
        run: mvn com.github.spotbugs:spotbugs-maven-plugin:check
      
      - name: Run OWASP Dependency Check
        run: mvn org.owasp:dependency-check-maven:check
      
      - name: SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=luckxpress-backend \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      
      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            target/spotbugs-reports/
            target/dependency-check-report.html
  
  # Job 2: Unit & Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: luckxpress_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
      
      - name: Run Unit Tests
        run: mvn clean test -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/luckxpress_test
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          SPRING_REDIS_HOST: localhost
          SPRING_REDIS_PORT: 6379
      
      - name: Run Integration Tests
        run: mvn verify -P integration-test -DskipUnitTests
      
      - name: Generate Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: '**/target/surefire-reports/*.xml'
          reporter: java-junit
      
      - name: Code Coverage Report
        run: mvn jacoco:report-aggregate
      
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: target/site/jacoco-aggregate/jacoco.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Check Coverage Threshold
        run: |
          mvn jacoco:check
          if [ $? -ne 0 ]; then
            echo "‚ùå Code coverage below 80% threshold"
            exit 1
          fi
  
  # Job 3: Postman API Tests
  postman-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Start Application
        run: |
          mvn spring-boot:run -Dspring.profiles.active=test &
          sleep 30  # Wait for app to start
      
      - name: Install Newman (Postman CLI)
        run: npm install -g newman newman-reporter-htmlextra
      
      - name: Run Postman Collection
        run: |
          newman run postman/LuckXpress-API-Collection.json \
            -e postman/environments/ci.json \
            --reporters cli,junit,htmlextra \
            --reporter-junit-export target/postman-results.xml \
            --reporter-htmlextra-export target/postman-report.html
      
      - name: Upload Postman Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: postman-reports
          path: |
            target/postman-results.xml
            target/postman-report.html
      
      - name: Notify Sentry of Test Results
        if: always()
        run: |
          curl -X POST "https://sentry.io/api/0/organizations/${{ env.SENTRY_ORG }}/releases/" \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.sha }}",
              "projects": ["${{ env.SENTRY_PROJECT }}"],
              "commits": [{
                "id": "${{ github.sha }}",
                "message": "${{ github.event.head_commit.message }}"
              }]
            }'
  
  # Job 4: Build & Push Docker Image
  docker-build:
    runs-on: ubuntu-latest
    needs: [test, postman-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
      
      - name: Build JAR
        run: mvn clean package -DskipTests
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ github.sha }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
  
  # Job 5: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to Kubernetes Staging
        uses: azure/k8s-deploy@v4
        with:
          namespace: luckxpress-staging
          manifests: |
            k8s/staging/deployment.yml
            k8s/staging/service.yml
            k8s/staging/ingress.yml
          images: |
            ghcr.io/${{ github.repository }}:develop-${{ github.sha }}
      
      - name: Create Sentry Release
        run: |
          curl -X POST "https://sentry.io/api/0/organizations/${{ env.SENTRY_ORG }}/releases/" \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "staging-${{ github.sha }}",
              "projects": ["${{ env.SENTRY_PROJECT }}"],
              "environment": "staging",
              "refs": [{
                "repository": "${{ github.repository }}",
                "commit": "${{ github.sha }}"
              }]
            }'
      
      - name: Run Smoke Tests
        run: |
          npm install -g newman
          newman run postman/Smoke-Tests.json \
            -e postman/environments/staging.json \
            --bail
