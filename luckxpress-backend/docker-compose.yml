version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: luckxpress-postgres
    environment:
      POSTGRES_DB: luckxpress
      POSTGRES_USER: luckxpress
      POSTGRES_PASSWORD: luckxpress123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - luckxpress-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U luckxpress"]
      interval: 10s
      timeout: 5s
      retries: 5

  # LuckXpress Backend Application
  luckxpress-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: luckxpress-backend
    environment:
      # Database Configuration
      DB_URL: jdbc:postgresql://postgres:5432/luckxpress
      DB_USERNAME: luckxpress
      DB_PASSWORD: luckxpress123
      DB_DRIVER: org.postgresql.Driver
      DB_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970}
      JWT_EXPIRATION: 86400000
      JWT_REFRESH_EXPIRATION: 604800000
      
      # Server Configuration
      SERVER_PORT: 8080
      
      # H2 Console
      H2_CONSOLE_ENABLED: "false"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - luckxpress-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Adminer (Database Management)
  adminer:
    image: adminer:latest
    container_name: luckxpress-adminer
    ports:
      - "8081:8080"
    networks:
      - luckxpress-network
    depends_on:
      - postgres
    restart: unless-stopped

networks:
  luckxpress-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
